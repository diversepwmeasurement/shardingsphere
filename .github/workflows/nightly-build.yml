env:
  HUB: ghcr.io/apache/shardingsphere
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard
    -Dmaven.wagon.http.retryHandler.count=3 -DskipITs -DskipTests -Dspotless.apply.skip=true
  PROXY: ghcr.io/apache/shardingsphere-proxy
  PROXY_NATIVE: ghcr.io/apache/shardingsphere-proxy-native
jobs:
  build-cache:
    if: ${{ needs.global-environment.outputs.GLOBAL_IS_NIGHTLY_JOB_EXECUTABLE == 'true'
      }}
    name: Build Project
    needs: global-environment
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-${{
          hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-

          '
    - continue-on-error: true
      name: Build with Maven
      run: ./mvnw -B -T1C -ntp clean install -DskipITs -DskipTests
    timeout-minutes: 15
  build-proxy-image:
    if: github.repository == 'apache/shardingsphere'
    name: Build Proxy Image
    needs: global-environment
    permissions:
      contents: read
      packages: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit-id }}
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-cache-${{
          github.sha }}
        path: ~/.m2/repository
        restore-keys: '${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-cache-

          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-

          '
    - continue-on-error: true
      name: Login Container Registry
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ${{ env.HUB }}
        username: ${{ github.actor }}
    - continue-on-error: true
      uses: docker/setup-qemu-action@v3
    - continue-on-error: true
      uses: docker/setup-buildx-action@v3
    - continue-on-error: true
      name: Push Docker Image
      run: ./mvnw -am -pl distribution/proxy -B -Prelease,docker.buildx.push -DskipTests
        -Dproxy.image.repository=${{ env.PROXY }} -Dproxy.image.tag=${{ github.sha
        }} clean install
    timeout-minutes: 60
  build-proxy-native-image:
    if: github.repository == 'apache/shardingsphere'
    name: Build Proxy Native Image
    needs: global-environment
    permissions:
      contents: read
      packages: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit-id }}
    - continue-on-error: true
      uses: graalvm/setup-graalvm@v1
      with:
        distribution: graalvm-community
        github-token: ${{ secrets.GITHUB_TOKEN }}
        java-version: 21.0.2
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-cache-${{
          github.sha }}
        path: ~/.m2/repository
        restore-keys: '${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-cache-

          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-

          '
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ${{ env.HUB }}
        username: ${{ github.actor }}
    - continue-on-error: true
      name: Push Docker Image
      run: './mvnw -am -pl distribution/proxy-native -Prelease.native,docker.buildx.push.native
        -B -T1C -DskipTests -Dproxy.image.repository=${{ env.PROXY_NATIVE }} -Dproxy.image.tag=${{
        github.sha }} clean package

        '
    timeout-minutes: 90
  generate-and-test-examples:
    if: github.repository == 'apache/shardingsphere'
    name: Example-${{ matrix.feature }}-${{ matrix.framework }}-${{ matrix.mode }}-${{
      matrix.transaction }}
    needs: build-cache
    runs-on: self-hosted
    services:
      mysql:
        env:
          MYSQL_ROOT_PASSWORD: 123456
        image: mysql:8.0.22
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s
          --health-retries=3
        ports:
        - 3306:3306
      zookeeper:
        image: zookeeper:3.6.3
        options: --health-cmd="echo ruok | nc localhost 2181" --health-interval=10s
          --health-timeout=5s --health-retries=3
        ports:
        - 2181:2181
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-${{
          hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-

          '
    - continue-on-error: true
      name: Prepare Environments
      run: sh .github/workflows/resources/scripts/nightly-build-example/init-mysql-container.sh
    - continue-on-error: true
      name: Build with Maven
      run: ./mvnw -B -T1C -ntp clean install -DskipITs -DskipTests
    - continue-on-error: true
      name: Generate Examples
      run: ./mvnw -B clean install -f examples/shardingsphere-jdbc-example-generator/pom.xml
        -Pexample-generator -Dmodes=${{ matrix.mode }} -Dtransactions=${{ matrix.transaction
        }} -Dfeatures=${{ matrix.feature }} -Dframeworks=${{ matrix.framework }}
    - continue-on-error: true
      name: Test Examples
      run: ./mvnw -B test -f examples/shardingsphere-jdbc-example-generator/target/generated-sources/shardingsphere-jdbc-sample/${{
        matrix.feature }}--${{ matrix.framework }}--${{ matrix.mode }}--${{ matrix.transaction
        }}/pom.xml -Pexample-generator -Dexec.cleanupDaemonThreads=false
    - continue-on-error: true
      name: Package Examples
      run: 'cd examples/shardingsphere-jdbc-example-generator/target/generated-sources/shardingsphere-jdbc-sample/

        tar -czvf ${{ matrix.feature }}--${{ matrix.framework }}--${{ matrix.mode
        }}--${{ matrix.transaction }}.tar.gz ${{ matrix.feature }}--${{ matrix.framework
        }}--${{ matrix.mode }}--${{ matrix.transaction }}

        '
    - continue-on-error: true
      uses: burnett01/rsync-deployments@5.2
      with:
        path: examples/shardingsphere-jdbc-example-generator/target/generated-sources/shardingsphere-jdbc-sample/${{
          matrix.feature }}--${{ matrix.framework }}--${{ matrix.mode }}--${{ matrix.transaction
          }}.tar.gz
        remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}
        remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}
        remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/shardingsphere/examples
        remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}
        remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}
        switches: -avzr
    strategy:
      fail-fast: false
      matrix:
        exclude:
        - feature: shadow
          framework: spring-boot-starter-jpa
        - feature: shadow
          framework: spring-namespace-jpa
        - mode: cluster-zookeeper
          transaction: xa-atomikos
        - mode: cluster-zookeeper
          transaction: xa-narayana
        - feature: sharding
          framework: spring-boot-starter-mybatis
          mode: standalone
          transaction: xa-atomikos
        - feature: sharding
          framework: spring-boot-starter-mybatis
          mode: standalone
          transaction: xa-narayana
        feature:
        - sharding
        - readwrite-splitting
        - encrypt
        - shadow
        - mask
        framework:
        - jdbc
        - spring-boot-starter-jdbc
        - spring-boot-starter-jpa
        - spring-boot-starter-mybatis
        - spring-namespace-jdbc
        - spring-namespace-jpa
        - spring-namespace-mybatis
        mode:
        - standalone
        - cluster-zookeeper
        transaction:
        - local
        - xa-atomikos
        - xa-narayana
      max-parallel: 20
    timeout-minutes: 90
  global-environment:
    name: Import Global Environment
    uses: ./.github/workflows/required-reusable.yml
  upload-to-nightlies:
    if: github.repository == 'apache/shardingsphere'
    name: Upload to Nightly Builds
    needs: global-environment
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-cache-${{
          github.sha }}
        path: ~/.m2/repository
        restore-keys: '${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-cache-

          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-

          '
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - continue-on-error: true
      name: Build Project
      run: './mvnw -B clean install -Prelease

        '
    - continue-on-error: true
      uses: burnett01/rsync-deployments@5.2
      with:
        path: distribution/proxy/target/apache-shardingsphere-*.tar.gz
        remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}
        remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}
        remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/shardingsphere
        remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}
        remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}
        switches: -avzr
    timeout-minutes: 60
name: Nightly - Build
on:
  repository_dispatch:
    types: trigger-ga___nightly-build.yml
